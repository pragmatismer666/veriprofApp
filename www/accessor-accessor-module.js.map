{"version":3,"sources":["webpack:///./node_modules/@ionic-native/base64/ngx/index.js","webpack:///./node_modules/@ionic-native/camera/ngx/index.js","webpack:///./node_modules/@ionic-native/file/ngx/index.js","webpack:///./src/app/home/accessor/accessor.module.ts","webpack:///./src/app/home/accessor/accessor.page.html","webpack:///./src/app/home/accessor/accessor.page.scss","webpack:///./src/app/home/accessor/accessor.page.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkC;AACS;AACqB;AAChE;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA,uDAAuD,QAAQ,kEAAO,uBAAuB,aAAa;AAC1G;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,wDAAU;AAC1B;AACA;AACA,CAAC,CAAC,oEAAiB;AACD;AAClB,2CAA2C,mlE;;;;;;;;;;;;ACpB3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkC;AACS;AACqB;AACzD;AACP;AACA;AACA;AACA;AACA,CAAC,0CAA0C;AACpC;AACP;AACA;AACA;AACA,CAAC,oCAAoC;AAC9B;AACP;AACA;AACA;AACA;AACA,CAAC,8BAA8B;AACxB;AACP;AACA;AACA;AACA;AACA,CAAC,8CAA8C;AACxC;AACP;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,sDAAsD;AAChD;AACP;AACA;AACA;AACA,CAAC,8BAA8B;AAC/B;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,QAAQ,kEAAO,sBAAsB,6BAA6B,aAAa;AACrI,4CAA4C,QAAQ,kEAAO,mBAAmB,uBAAuB,aAAa;AAClH;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,wDAAU;AAC1B;AACA;AACA,CAAC,CAAC,oEAAiB;AACD;AAClB,2CAA2C,u3Z;;;;;;;;;;;;ACvH3C;AAAA;AAAA;AAAA;AAAA;AAAkC;AACS;AACmF;AAC9H;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,4EAAiB;AACjC,uBAAuB,qEAAU;AACjC;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB,4EAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB,4EAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB,4EAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,gBAAgB;AAC7E,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB,4EAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,gBAAgB;AAC7E,iBAAiB;AACjB;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB,4EAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,gBAAgB;AAC7E,iBAAiB;AACjB;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB,4EAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB,4EAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,gBAAgB;AAC7E,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB,4EAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB,4EAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB,4EAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,gBAAgB;AACzE,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA,iCAAiC,cAAc;AAC/C;AACA,gBAAgB,4EAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB,eAAe,4BAA4B;AAC3C,eAAe,cAAc;AAC7B,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,+BAA+B,WAAW,EAAE;AAC5C;AACA;AACA;AACA;AACA,gBAAgB,4EAAiB;AACjC,8DAA8D,gBAAgB;AAC9E;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB,4EAAiB;AACjC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB,4EAAiB;AACjC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB,4EAAiB;AACjC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB,4EAAiB;AACjC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB,4EAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,gBAAgB;AACzE,iBAAiB;AACjB;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB,4EAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,gBAAgB;AACzE,iBAAiB;AACjB;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA,gBAAgB,4EAAiB;AACjC,uBAAuB,qEAAU;AACjC;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB,4EAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB,4EAAiB;AACjC;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB,4EAAiB;AACjC;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,gBAAgB;AACxE,SAAS;AACT;AACA;AACA,mBAAmB,qEAAU;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,8CAA8C;AAC9E;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,iCAAiC;AAC1D,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,iCAAiC;AAC1D,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,qEAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,0BAA0B,QAAQ,6EAAkB,+BAA+B,EAAE;AACrF,+BAA+B,CAAC,6EAAkB,sCAAsC,EAAE;AAC1F;AACA;AACA,KAAK;AACL;AACA,0BAA0B,QAAQ,6EAAkB,sCAAsC,EAAE;AAC5F,+BAA+B,CAAC,6EAAkB,6CAA6C,EAAE;AACjG;AACA;AACA,KAAK;AACL;AACA,0BAA0B,QAAQ,6EAAkB,wBAAwB,EAAE;AAC9E,+BAA+B,CAAC,6EAAkB,+BAA+B,EAAE;AACnF;AACA;AACA,KAAK;AACL;AACA,0BAA0B,QAAQ,6EAAkB,yBAAyB,EAAE;AAC/E,+BAA+B,CAAC,6EAAkB,gCAAgC,EAAE;AACpF;AACA;AACA,KAAK;AACL;AACA,0BAA0B,QAAQ,6EAAkB,8CAA8C,EAAE;AACpG,+BAA+B,CAAC,6EAAkB,qDAAqD,EAAE;AACzG;AACA;AACA,KAAK;AACL;AACA,0BAA0B,QAAQ,6EAAkB,gCAAgC,EAAE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","file":"accessor-accessor-module.js","sourcesContent":["import { __extends } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { IonicNativePlugin, cordova } from '@ionic-native/core';\nvar Base64 = /** @class */ (function (_super) {\n    __extends(Base64, _super);\n    function Base64() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Base64.prototype.encodeFile = function (filePath) { return cordova(this, \"encodeFile\", {}, arguments); };\n    Base64.pluginName = \"Base64\";\n    Base64.plugin = \"com-badrit-base64\";\n    Base64.pluginRef = \"plugins.Base64\";\n    Base64.repo = \"https://github.com/hazemhagrass/phonegap-base64\";\n    Base64.platforms = [\"Android\", \"iOS\"];\n    Base64.decorators = [\n        { type: Injectable }\n    ];\n    return Base64;\n}(IonicNativePlugin));\nexport { Base64 };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2Jhc2U2NC9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQzs7SUFpQzVDLDBCQUFpQjs7OztJQU8zQywyQkFBVSxhQUFDLFFBQWdCOzs7Ozs7O2dCQVI1QixVQUFVOztpQkFqQ1g7RUFrQzRCLGlCQUFpQjtTQUFoQyxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5cbi8qKlxuICogQGJldGFcbiAqIEBuYW1lIEJhc2U2NFxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGlzIFBsdWdpbiBpcyB1c2VkIHRvIGVuY29kZSBiYXNlNjQgb2YgYW55IGZpbGUsIGl0IHVzZXMganMgY29kZSBmb3IgaU9TLCBidXQgaW4gY2FzZSBvZiBhbmRyb2lkIGl0IHVzZXMgbmF0aXZlIGNvZGUgdG8gaGFuZGxlIGFuZHJvaWQgdmVyc2lvbnMgbG93ZXIgdGhhbiB2LjNcbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IEJhc2U2NCB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvYmFzZTY0L25neCc7XG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBiYXNlNjQ6IEJhc2U2NCkgeyB9XG4gKlxuICogLi4uXG4gKlxuICogbGV0IGZpbGVQYXRoOiBzdHJpbmcgPSAnZmlsZTovLy8uLi4nO1xuICogdGhpcy5iYXNlNjQuZW5jb2RlRmlsZShmaWxlUGF0aCkudGhlbigoYmFzZTY0RmlsZTogc3RyaW5nKSA9PiB7XG4gKiAgIGNvbnNvbGUubG9nKGJhc2U2NEZpbGUpO1xuICogfSwgKGVycikgPT4ge1xuICogICBjb25zb2xlLmxvZyhlcnIpO1xuICogfSk7XG4gKlxuICogYGBgXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnQmFzZTY0JyxcbiAgcGx1Z2luOiAnY29tLWJhZHJpdC1iYXNlNjQnLFxuICBwbHVnaW5SZWY6ICdwbHVnaW5zLkJhc2U2NCcsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vaGF6ZW1oYWdyYXNzL3Bob25lZ2FwLWJhc2U2NCcsXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBCYXNlNjQgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIGVuY29kZXMgYmFzZTY0IG9mIGFueSBmaWxlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlUGF0aCBBYnNvbHV0ZSBmaWxlIHBhdGhcbiAgICogQHJldHVybiB7UHJvbWlzZTxzdHJpbmc+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIGZpbGUgaXMgc3VjY2Vzc2Z1bGx5IGVuY29kZWRcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgZW5jb2RlRmlsZShmaWxlUGF0aDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==","import { __extends } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { IonicNativePlugin, cordova } from '@ionic-native/core';\nexport var DestinationType;\n(function (DestinationType) {\n    DestinationType[DestinationType[\"DATA_URL\"] = 0] = \"DATA_URL\";\n    DestinationType[DestinationType[\"FILE_URL\"] = 1] = \"FILE_URL\";\n    DestinationType[DestinationType[\"NATIVE_URI\"] = 2] = \"NATIVE_URI\";\n})(DestinationType || (DestinationType = {}));\nexport var EncodingType;\n(function (EncodingType) {\n    EncodingType[EncodingType[\"JPEG\"] = 0] = \"JPEG\";\n    EncodingType[EncodingType[\"PNG\"] = 1] = \"PNG\";\n})(EncodingType || (EncodingType = {}));\nexport var MediaType;\n(function (MediaType) {\n    MediaType[MediaType[\"PICTURE\"] = 0] = \"PICTURE\";\n    MediaType[MediaType[\"VIDEO\"] = 1] = \"VIDEO\";\n    MediaType[MediaType[\"ALLMEDIA\"] = 2] = \"ALLMEDIA\";\n})(MediaType || (MediaType = {}));\nexport var PictureSourceType;\n(function (PictureSourceType) {\n    PictureSourceType[PictureSourceType[\"PHOTOLIBRARY\"] = 0] = \"PHOTOLIBRARY\";\n    PictureSourceType[PictureSourceType[\"CAMERA\"] = 1] = \"CAMERA\";\n    PictureSourceType[PictureSourceType[\"SAVEDPHOTOALBUM\"] = 2] = \"SAVEDPHOTOALBUM\";\n})(PictureSourceType || (PictureSourceType = {}));\nexport var PopoverArrowDirection;\n(function (PopoverArrowDirection) {\n    PopoverArrowDirection[PopoverArrowDirection[\"ARROW_UP\"] = 1] = \"ARROW_UP\";\n    PopoverArrowDirection[PopoverArrowDirection[\"ARROW_DOWN\"] = 2] = \"ARROW_DOWN\";\n    PopoverArrowDirection[PopoverArrowDirection[\"ARROW_LEFT\"] = 3] = \"ARROW_LEFT\";\n    PopoverArrowDirection[PopoverArrowDirection[\"ARROW_RIGHT\"] = 4] = \"ARROW_RIGHT\";\n    PopoverArrowDirection[PopoverArrowDirection[\"ARROW_ANY\"] = 5] = \"ARROW_ANY\";\n})(PopoverArrowDirection || (PopoverArrowDirection = {}));\nexport var Direction;\n(function (Direction) {\n    Direction[Direction[\"BACK\"] = 0] = \"BACK\";\n    Direction[Direction[\"FRONT\"] = 1] = \"FRONT\";\n})(Direction || (Direction = {}));\nvar Camera = /** @class */ (function (_super) {\n    __extends(Camera, _super);\n    function Camera() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /**\n         * Constant for possible destination types\n         */\n        _this.DestinationType = {\n            /** Return base64 encoded string. DATA_URL can be very memory intensive and cause app crashes or out of memory errors. Use FILE_URI or NATIVE_URI if possible */\n            DATA_URL: 0,\n            /** Return file uri (content://media/external/images/media/2 for Android) */\n            FILE_URI: 1,\n            /** Return native uri (eg. asset-library://... for iOS) */\n            NATIVE_URI: 2,\n        };\n        /**\n         * Convenience constant\n         */\n        _this.EncodingType = {\n            /** Return JPEG encoded image */\n            JPEG: 0,\n            /** Return PNG encoded image */\n            PNG: 1,\n        };\n        /**\n         * Convenience constant\n         */\n        _this.MediaType = {\n            /** Allow selection of still pictures only. DEFAULT. Will return format specified via DestinationType */\n            PICTURE: 0,\n            /** Allow selection of video only, ONLY RETURNS URL */\n            VIDEO: 1,\n            /** Allow selection from all media types */\n            ALLMEDIA: 2,\n        };\n        /**\n         * Convenience constant\n         */\n        _this.PictureSourceType = {\n            /** Choose image from picture library (same as PHOTOLIBRARY for Android) */\n            PHOTOLIBRARY: 0,\n            /** Take picture from camera */\n            CAMERA: 1,\n            /** Choose image from picture library (same as SAVEDPHOTOALBUM for Android) */\n            SAVEDPHOTOALBUM: 2,\n        };\n        /**\n         * Convenience constant\n         */\n        _this.PopoverArrowDirection = {\n            ARROW_UP: 1,\n            ARROW_DOWN: 2,\n            ARROW_LEFT: 4,\n            ARROW_RIGHT: 8,\n            ARROW_ANY: 15,\n        };\n        /**\n         * Convenience constant\n         */\n        _this.Direction = {\n            /** Use the back-facing camera */\n            BACK: 0,\n            /** Use the front-facing camera */\n            FRONT: 1,\n        };\n        return _this;\n    }\n    Camera.prototype.getPicture = function (options) { return cordova(this, \"getPicture\", { \"callbackOrder\": \"reverse\" }, arguments); };\n    Camera.prototype.cleanup = function () { return cordova(this, \"cleanup\", { \"platforms\": [\"iOS\"] }, arguments); };\n    Camera.pluginName = \"Camera\";\n    Camera.plugin = \"cordova-plugin-camera\";\n    Camera.pluginRef = \"navigator.camera\";\n    Camera.repo = \"https://github.com/apache/cordova-plugin-camera\";\n    Camera.platforms = [\"Android\", \"Browser\", \"iOS\", \"Windows\"];\n    Camera.decorators = [\n        { type: Injectable }\n    ];\n    return Camera;\n}(IonicNativePlugin));\nexport { Camera };\n//# sourceMappingURL=data:application/json;base64,","import { __extends } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { IonicNativePlugin, checkAvailability, cordovaPropertyGet, cordovaPropertySet, getPromise } from '@ionic-native/core';\nvar File = /** @class */ (function (_super) {\n    __extends(File, _super);\n    function File() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.cordovaFileError = {\n            1: 'NOT_FOUND_ERR',\n            2: 'SECURITY_ERR',\n            3: 'ABORT_ERR',\n            4: 'NOT_READABLE_ERR',\n            5: 'ENCODING_ERR',\n            6: 'NO_MODIFICATION_ALLOWED_ERR',\n            7: 'INVALID_STATE_ERR',\n            8: 'SYNTAX_ERR',\n            9: 'INVALID_MODIFICATION_ERR',\n            10: 'QUOTA_EXCEEDED_ERR',\n            11: 'TYPE_MISMATCH_ERR',\n            12: 'PATH_EXISTS_ERR',\n            13: 'WRONG_ENTRY_TYPE',\n            14: 'DIR_READ_ERR',\n        };\n        return _this;\n    }\n    File.prototype.getFreeDiskSpace = function () {\n        var _this = this;\n        return (function () {\n            if (checkAvailability(_this) === true) {\n                return getPromise(function (resolve, reject) {\n                    cordova.exec(resolve, reject, 'File', 'getFreeDiskSpace', []);\n                });\n            }\n        })();\n    };\n    File.prototype.checkDir = function (path, dir) {\n        var _this = this;\n        return (function () {\n            if (checkAvailability(_this) === true) {\n                if (/^\\//.test(dir)) {\n                    var err = new FileError(5);\n                    err.message = 'directory cannot start with /';\n                    return Promise.reject(err);\n                }\n                var fullPath = path + dir;\n                return _this.resolveDirectoryUrl(fullPath).then(function () {\n                    return true;\n                });\n            }\n        })();\n    };\n    File.prototype.createDir = function (path, dirName, replace) {\n        var _this = this;\n        return (function () {\n            if (checkAvailability(_this) === true) {\n                if (/^\\//.test(dirName)) {\n                    var err = new FileError(5);\n                    err.message = 'directory cannot start with /';\n                    return Promise.reject(err);\n                }\n                var options = {\n                    create: true,\n                };\n                if (!replace) {\n                    options.exclusive = true;\n                }\n                return _this.resolveDirectoryUrl(path).then(function (fse) {\n                    return _this.getDirectory(fse, dirName, options);\n                });\n            }\n        })();\n    };\n    File.prototype.removeDir = function (path, dirName) {\n        var _this = this;\n        return (function () {\n            if (checkAvailability(_this) === true) {\n                if (/^\\//.test(dirName)) {\n                    var err = new FileError(5);\n                    err.message = 'directory cannot start with /';\n                    return Promise.reject(err);\n                }\n                return _this.resolveDirectoryUrl(path)\n                    .then(function (fse) {\n                    return _this.getDirectory(fse, dirName, { create: false });\n                })\n                    .then(function (de) {\n                    return _this.remove(de);\n                });\n            }\n        })();\n    };\n    File.prototype.moveDir = function (path, dirName, newPath, newDirName) {\n        var _this = this;\n        return (function () {\n            if (checkAvailability(_this) === true) {\n                newDirName = newDirName || dirName;\n                if (/^\\//.test(newDirName)) {\n                    var err = new FileError(5);\n                    err.message = 'directory cannot start with /';\n                    return Promise.reject(err);\n                }\n                return _this.resolveDirectoryUrl(path)\n                    .then(function (fse) {\n                    return _this.getDirectory(fse, dirName, { create: false });\n                })\n                    .then(function (srcde) {\n                    return _this.resolveDirectoryUrl(newPath).then(function (destenation) {\n                        return _this.move(srcde, destenation, newDirName);\n                    });\n                });\n            }\n        })();\n    };\n    File.prototype.copyDir = function (path, dirName, newPath, newDirName) {\n        var _this = this;\n        return (function () {\n            if (checkAvailability(_this) === true) {\n                if (/^\\//.test(newDirName)) {\n                    var err = new FileError(5);\n                    err.message = 'directory cannot start with /';\n                    return Promise.reject(err);\n                }\n                return _this.resolveDirectoryUrl(path)\n                    .then(function (fse) {\n                    return _this.getDirectory(fse, dirName, { create: false });\n                })\n                    .then(function (srcde) {\n                    return _this.resolveDirectoryUrl(newPath).then(function (deste) {\n                        return _this.copy(srcde, deste, newDirName);\n                    });\n                });\n            }\n        })();\n    };\n    File.prototype.listDir = function (path, dirName) {\n        var _this = this;\n        return (function () {\n            if (checkAvailability(_this) === true) {\n                if (/^\\//.test(dirName)) {\n                    var err = new FileError(5);\n                    err.message = 'directory cannot start with /';\n                    return Promise.reject(err);\n                }\n                return _this.resolveDirectoryUrl(path)\n                    .then(function (fse) {\n                    return _this.getDirectory(fse, dirName, {\n                        create: false,\n                        exclusive: false,\n                    });\n                })\n                    .then(function (de) {\n                    var reader = de.createReader();\n                    return _this.readEntries(reader);\n                });\n            }\n        })();\n    };\n    File.prototype.removeRecursively = function (path, dirName) {\n        var _this = this;\n        return (function () {\n            if (checkAvailability(_this) === true) {\n                if (/^\\//.test(dirName)) {\n                    var err = new FileError(5);\n                    err.message = 'directory cannot start with /';\n                    return Promise.reject(err);\n                }\n                return _this.resolveDirectoryUrl(path)\n                    .then(function (fse) {\n                    return _this.getDirectory(fse, dirName, { create: false });\n                })\n                    .then(function (de) {\n                    return _this.rimraf(de);\n                });\n            }\n        })();\n    };\n    File.prototype.checkFile = function (path, file) {\n        var _this = this;\n        return (function () {\n            if (checkAvailability(_this) === true) {\n                if (/^\\//.test(file)) {\n                    var err = new FileError(5);\n                    err.message = 'file cannot start with /';\n                    return Promise.reject(err);\n                }\n                return _this.resolveLocalFilesystemUrl(path + file).then(function (fse) {\n                    if (fse.isFile) {\n                        return true;\n                    }\n                    else {\n                        var err = new FileError(13);\n                        err.message = 'input is not a file';\n                        return Promise.reject(err);\n                    }\n                });\n            }\n        })();\n    };\n    File.prototype.createFile = function (path, fileName, replace) {\n        var _this = this;\n        return (function () {\n            if (checkAvailability(_this) === true) {\n                if (/^\\//.test(fileName)) {\n                    var err = new FileError(5);\n                    err.message = 'file-name cannot start with /';\n                    return Promise.reject(err);\n                }\n                var options = {\n                    create: true,\n                };\n                if (!replace) {\n                    options.exclusive = true;\n                }\n                return _this.resolveDirectoryUrl(path).then(function (fse) {\n                    return _this.getFile(fse, fileName, options);\n                });\n            }\n        })();\n    };\n    File.prototype.removeFile = function (path, fileName) {\n        var _this = this;\n        return (function () {\n            if (checkAvailability(_this) === true) {\n                if (/^\\//.test(fileName)) {\n                    var err = new FileError(5);\n                    err.message = 'file-name cannot start with /';\n                    return Promise.reject(err);\n                }\n                return _this.resolveDirectoryUrl(path)\n                    .then(function (fse) {\n                    return _this.getFile(fse, fileName, { create: false });\n                })\n                    .then(function (fe) {\n                    return _this.remove(fe);\n                });\n            }\n        })();\n    };\n    File.prototype.writeFile = function (path, fileName, text, options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        return (function () {\n            if (checkAvailability(_this) === true) {\n                if (/^\\//.test(fileName)) {\n                    var err = new FileError(5);\n                    err.message = 'file-name cannot start with /';\n                    return Promise.reject(err);\n                }\n                var getFileOpts = {\n                    create: !options.append,\n                    exclusive: !options.replace,\n                };\n                return _this.resolveDirectoryUrl(path)\n                    .then(function (directoryEntry) {\n                    return _this.getFile(directoryEntry, fileName, getFileOpts);\n                })\n                    .then(function (fileEntry) {\n                    return _this.writeFileEntry(fileEntry, text, options);\n                });\n            }\n        })();\n    };\n    /**\n     * Write content to FileEntry.\n     * @hidden\n     * Write to an existing file.\n     * @param {FileEntry} fe file entry object\n     * @param {string | Blob | ArrayBuffer} text text content or blob to write\n     * @param {IWriteOptions} options replace file if set to true. See WriteOptions for more information.\n     * @returns {Promise<FileEntry>}  Returns a Promise that resolves to updated file entry or rejects with an error.\n     */\n    File.prototype.writeFileEntry = function (fe, text, options) {\n        var _this = this;\n        return this.createWriter(fe)\n            .then(function (writer) {\n            if (options.append) {\n                writer.seek(writer.length);\n            }\n            if (options.truncate) {\n                writer.truncate(options.truncate);\n            }\n            return _this.write(writer, text);\n        })\n            .then(function () { return fe; });\n    };\n    File.prototype.writeExistingFile = function (path, fileName, text) {\n        var _this = this;\n        return (function () {\n            if (checkAvailability(_this) === true) {\n                return _this.writeFile(path, fileName, text, { replace: true });\n            }\n        })();\n    };\n    File.prototype.readAsText = function (path, file) {\n        var _this = this;\n        return (function () {\n            if (checkAvailability(_this) === true) {\n                return _this.readFile(path, file, 'Text');\n            }\n        })();\n    };\n    File.prototype.readAsDataURL = function (path, file) {\n        var _this = this;\n        return (function () {\n            if (checkAvailability(_this) === true) {\n                return _this.readFile(path, file, 'DataURL');\n            }\n        })();\n    };\n    File.prototype.readAsBinaryString = function (path, file) {\n        var _this = this;\n        return (function () {\n            if (checkAvailability(_this) === true) {\n                return _this.readFile(path, file, 'BinaryString');\n            }\n        })();\n    };\n    File.prototype.readAsArrayBuffer = function (path, file) {\n        var _this = this;\n        return (function () {\n            if (checkAvailability(_this) === true) {\n                return _this.readFile(path, file, 'ArrayBuffer');\n            }\n        })();\n    };\n    File.prototype.moveFile = function (path, fileName, newPath, newFileName) {\n        var _this = this;\n        return (function () {\n            if (checkAvailability(_this) === true) {\n                newFileName = newFileName || fileName;\n                if (/^\\//.test(newFileName)) {\n                    var err = new FileError(5);\n                    err.message = 'file name cannot start with /';\n                    return Promise.reject(err);\n                }\n                return _this.resolveDirectoryUrl(path)\n                    .then(function (fse) {\n                    return _this.getFile(fse, fileName, { create: false });\n                })\n                    .then(function (srcfe) {\n                    return _this.resolveDirectoryUrl(newPath).then(function (deste) {\n                        return _this.move(srcfe, deste, newFileName);\n                    });\n                });\n            }\n        })();\n    };\n    File.prototype.copyFile = function (path, fileName, newPath, newFileName) {\n        var _this = this;\n        return (function () {\n            if (checkAvailability(_this) === true) {\n                newFileName = newFileName || fileName;\n                if (/^\\//.test(newFileName)) {\n                    var err = new FileError(5);\n                    err.message = 'file name cannot start with /';\n                    return Promise.reject(err);\n                }\n                return _this.resolveDirectoryUrl(path)\n                    .then(function (fse) {\n                    return _this.getFile(fse, fileName, { create: false });\n                })\n                    .then(function (srcfe) {\n                    return _this.resolveDirectoryUrl(newPath).then(function (deste) {\n                        return _this.copy(srcfe, deste, newFileName);\n                    });\n                });\n            }\n        })();\n    };\n    /**\n     * @hidden\n     */\n    File.prototype.fillErrorMessage = function (err) {\n        try {\n            err.message = this.cordovaFileError[err.code];\n        }\n        catch (e) { }\n    };\n    File.prototype.resolveLocalFilesystemUrl = function (fileUrl) {\n        var _this = this;\n        return (function () {\n            if (checkAvailability(_this) === true) {\n                return getPromise(function (resolve, reject) {\n                    try {\n                        window.resolveLocalFileSystemURL(fileUrl, function (entry) {\n                            resolve(entry);\n                        }, function (err) {\n                            _this.fillErrorMessage(err);\n                            reject(err);\n                        });\n                    }\n                    catch (xc) {\n                        _this.fillErrorMessage(xc);\n                        reject(xc);\n                    }\n                });\n            }\n        })();\n    };\n    File.prototype.resolveDirectoryUrl = function (directoryUrl) {\n        var _this = this;\n        return (function () {\n            if (checkAvailability(_this) === true) {\n                return _this.resolveLocalFilesystemUrl(directoryUrl).then(function (de) {\n                    if (de.isDirectory) {\n                        return de;\n                    }\n                    else {\n                        var err = new FileError(13);\n                        err.message = 'input is not a directory';\n                        return Promise.reject(err);\n                    }\n                });\n            }\n        })();\n    };\n    File.prototype.getDirectory = function (directoryEntry, directoryName, flags) {\n        var _this = this;\n        return (function () {\n            if (checkAvailability(_this) === true) {\n                return new Promise(function (resolve, reject) {\n                    try {\n                        directoryEntry.getDirectory(directoryName, flags, function (de) {\n                            resolve(de);\n                        }, function (err) {\n                            _this.fillErrorMessage(err);\n                            reject(err);\n                        });\n                    }\n                    catch (xc) {\n                        _this.fillErrorMessage(xc);\n                        reject(xc);\n                    }\n                });\n            }\n        })();\n    };\n    File.prototype.getFile = function (directoryEntry, fileName, flags) {\n        var _this = this;\n        return (function () {\n            if (checkAvailability(_this) === true) {\n                return new Promise(function (resolve, reject) {\n                    try {\n                        directoryEntry.getFile(fileName, flags, resolve, function (err) {\n                            _this.fillErrorMessage(err);\n                            reject(err);\n                        });\n                    }\n                    catch (xc) {\n                        _this.fillErrorMessage(xc);\n                        reject(xc);\n                    }\n                });\n            }\n        })();\n    };\n    File.prototype.readFile = function (path, file, readAs) {\n        var _this = this;\n        if (/^\\//.test(file)) {\n            var err = new FileError(5);\n            err.message = 'file-name cannot start with /';\n            return Promise.reject(err);\n        }\n        return this.resolveDirectoryUrl(path)\n            .then(function (directoryEntry) {\n            return _this.getFile(directoryEntry, file, { create: false });\n        })\n            .then(function (fileEntry) {\n            var reader = new FileReader();\n            return getPromise(function (resolve, reject) {\n                reader.onloadend = function () {\n                    if (reader.result !== undefined || reader.result !== null) {\n                        resolve(reader.result);\n                    }\n                    else if (reader.error !== undefined || reader.error !== null) {\n                        reject(reader.error);\n                    }\n                    else {\n                        reject({ code: null, message: 'READER_ONLOADEND_ERR' });\n                    }\n                };\n                fileEntry.file(function (file) {\n                    reader[\"readAs\" + readAs].call(reader, file);\n                }, function (error) {\n                    reject(error);\n                });\n            });\n        });\n    };\n    /**\n     * @hidden\n     */\n    File.prototype.remove = function (fe) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            fe.remove(function () {\n                resolve({ success: true, fileRemoved: fe });\n            }, function (err) {\n                _this.fillErrorMessage(err);\n                reject(err);\n            });\n        });\n    };\n    /**\n     * @hidden\n     */\n    File.prototype.move = function (srce, destdir, newName) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            srce.moveTo(destdir, newName, function (deste) {\n                resolve(deste);\n            }, function (err) {\n                _this.fillErrorMessage(err);\n                reject(err);\n            });\n        });\n    };\n    /**\n     * @hidden\n     */\n    File.prototype.copy = function (srce, destdir, newName) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            srce.copyTo(destdir, newName, function (deste) {\n                resolve(deste);\n            }, function (err) {\n                _this.fillErrorMessage(err);\n                reject(err);\n            });\n        });\n    };\n    /**\n     * @hidden\n     */\n    File.prototype.readEntries = function (dr) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            dr.readEntries(function (entries) {\n                resolve(entries);\n            }, function (err) {\n                _this.fillErrorMessage(err);\n                reject(err);\n            });\n        });\n    };\n    /**\n     * @hidden\n     */\n    File.prototype.rimraf = function (de) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            de.removeRecursively(function () {\n                resolve({ success: true, fileRemoved: de });\n            }, function (err) {\n                _this.fillErrorMessage(err);\n                reject(err);\n            });\n        });\n    };\n    /**\n     * @hidden\n     */\n    File.prototype.createWriter = function (fe) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            fe.createWriter(function (writer) {\n                resolve(writer);\n            }, function (err) {\n                _this.fillErrorMessage(err);\n                reject(err);\n            });\n        });\n    };\n    /**\n     * @hidden\n     */\n    File.prototype.write = function (writer, gu) {\n        if (gu instanceof Blob) {\n            return this.writeFileInChunks(writer, gu);\n        }\n        return new Promise(function (resolve, reject) {\n            writer.onwriteend = function (evt) {\n                if (writer.error) {\n                    reject(writer.error);\n                }\n                else {\n                    resolve(evt);\n                }\n            };\n            writer.write(gu);\n        });\n    };\n    /**\n     * @hidden\n     */\n    File.prototype.writeFileInChunks = function (writer, file) {\n        var BLOCK_SIZE = 1024 * 1024;\n        var writtenSize = 0;\n        function writeNextChunk() {\n            var size = Math.min(BLOCK_SIZE, file.size - writtenSize);\n            var chunk = file.slice(writtenSize, writtenSize + size);\n            writtenSize += size;\n            writer.write(chunk);\n        }\n        return getPromise(function (resolve, reject) {\n            writer.onerror = reject;\n            writer.onwrite = function () {\n                if (writtenSize < file.size) {\n                    writeNextChunk();\n                }\n                else {\n                    resolve();\n                }\n            };\n            writeNextChunk();\n        });\n    };\n    Object.defineProperty(File.prototype, \"applicationDirectory\", {\n        get: function () { return cordovaPropertyGet(this, \"applicationDirectory\"); },\n        set: function (value) { cordovaPropertySet(this, \"applicationDirectory\", value); },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(File.prototype, \"applicationStorageDirectory\", {\n        get: function () { return cordovaPropertyGet(this, \"applicationStorageDirectory\"); },\n        set: function (value) { cordovaPropertySet(this, \"applicationStorageDirectory\", value); },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(File.prototype, \"dataDirectory\", {\n        get: function () { return cordovaPropertyGet(this, \"dataDirectory\"); },\n        set: function (value) { cordovaPropertySet(this, \"dataDirectory\", value); },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(File.prototype, \"cacheDirectory\", {\n        get: function () { return cordovaPropertyGet(this, \"cacheDirectory\"); },\n        set: function (value) { cordovaPropertySet(this, \"cacheDirectory\", value); },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(File.prototype, \"externalApplicationStorageDirectory\", {\n        get: function () { return cordovaPropertyGet(this, \"externalApplicationStorageDirectory\"); },\n        set: function (value) { cordovaPropertySet(this, \"externalApplicationStorageDirectory\", value); },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(File.prototype, \"externalDataDirectory\", {\n        get: function () { return cordovaPropertyGet(this, \"externalDataDirectory\"); },\n        set: function (value) { cordovaPropertySet(this, \"externalDataDirectory\", value); },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(File.prototype, \"externalCacheDirectory\", {\n        get: function () { return cordovaPropertyGet(this, \"externalCacheDirectory\"); },\n        set: function (value) { cordovaPropertySet(this, \"externalCacheDirectory\", value); },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(File.prototype, \"externalRootDirectory\", {\n        get: function () { return cordovaPropertyGet(this, \"externalRootDirectory\"); },\n        set: function (value) { cordovaPropertySet(this, \"externalRootDirectory\", value); },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(File.prototype, \"tempDirectory\", {\n        get: function () { return cordovaPropertyGet(this, \"tempDirectory\"); },\n        set: function (value) { cordovaPropertySet(this, \"tempDirectory\", value); },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(File.prototype, \"syncedDataDirectory\", {\n        get: function () { return cordovaPropertyGet(this, \"syncedDataDirectory\"); },\n        set: function (value) { cordovaPropertySet(this, \"syncedDataDirectory\", value); },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(File.prototype, \"documentsDirectory\", {\n        get: function () { return cordovaPropertyGet(this, \"documentsDirectory\"); },\n        set: function (value) { cordovaPropertySet(this, \"documentsDirectory\", value); },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(File.prototype, \"sharedDirectory\", {\n        get: function () { return cordovaPropertyGet(this, \"sharedDirectory\"); },\n        set: function (value) { cordovaPropertySet(this, \"sharedDirectory\", value); },\n        enumerable: false,\n        configurable: true\n    });\n    File.pluginName = \"File\";\n    File.plugin = \"cordova-plugin-file\";\n    File.pluginRef = \"cordova.file\";\n    File.repo = \"https://github.com/apache/cordova-plugin-file\";\n    File.platforms = [\"Android\", \"Browser\", \"iOS\", \"macOS\", \"Windows\"];\n    File.decorators = [\n        { type: Injectable }\n    ];\n    return File;\n}(IonicNativePlugin));\nexport { File };\n//# sourceMappingURL=data:application/json;base64,","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\nimport { AccessorPage } from './accessor.page';\n\nimport { File } from '@ionic-native/file/ngx';\nimport { Camera } from '@ionic-native/camera/ngx'\nimport { Base64 } from '@ionic-native/base64/ngx';\n\nconst routes: Routes = [\n    { path: '', component: AccessorPage },\n    { path: 'unverifiedbiz', loadChildren: './unverifiedbiz/unverifiedbiz.module#UnverifiedbizPageModule' },\n    { path: 'unverifiedpers', loadChildren: './unverifiedpers/unverifiedpers.module#UnverifiedpersPageModule' },\n    // { path: 'unverifiedplans', loadChildren: './unverifiedplans/unverifiedplans.module#UnverifiedplansPageModule' },\n    { path: 'schedules', loadChildren: './schedules/schedules.module#SchedulesPageModule' },\n    { path: 'accessorsreport', loadChildren: './accessorsreport/accessorsreport.module#AccessorsreportPageModule' },\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        IonicModule,\n        RouterModule.forChild(routes)\n    ],\n    providers: [\n        Camera,\n        File,\n        Base64,\n    ],\n    declarations: [AccessorPage]\n})\n\nexport class AccessorPageModule { }\n","module.exports = \"<!-- <ion-header>\\n    <ion-toolbar color=\\\"dark\\\">\\n        <ion-img src=\\\"assets/veriprof-banner.png\\\"></ion-img>\\n    </ion-toolbar>\\n</ion-header> -->\\n<ion-header color=\\\"dark\\\" style=\\\"background: black;height: 28%;\\\">\\n    <ion-content color=\\\"dark\\\" >\\n      <ion-img src=\\\"assets/veriprof-logo2.png\\\" class=\\\"headerImage\\\"></ion-img>\\n      <h5 style=\\\"margin-top: 10px;\\\">Accessors Dashboard </h5>\\n      <h6 text-center style=\\\"font-size: 14px;\\\">Welcome : {{userEmail}}</h6>\\n    </ion-content>\\n  </ion-header>\\n\\n<ion-content padding color=\\\"dark\\\">\\n    <br>\\n    <ion-card>\\n        <ion-segment scrollable color=\\\"medium\\\">\\n            <ion-segment-button (click)=\\\"unverifiedbiz()\\\">\\n                <ion-img src=\\\"assets/biz.png\\\"></ion-img>\\n                <ion-label class=\\\"inner\\\">Business </ion-label>\\n            </ion-segment-button>\\n            <ion-segment-button (click)=\\\"unverifiedpers()\\\">\\n                <ion-img src=\\\"assets/personal.png\\\"></ion-img>\\n                <ion-label class=\\\"inner\\\">Profess</ion-label>\\n            </ion-segment-button>\\n        </ion-segment>\\n        <br>\\n        <ion-segment scrollable color=\\\"medium\\\">\\n            <ion-segment-button (click)=\\\"schedules()\\\">\\n                <ion-img src=\\\"assets/sched.png\\\"></ion-img>\\n                <ion-label class=\\\"inner\\\">Schedules</ion-label>\\n            </ion-segment-button>\\n            <ion-segment-button (click)=\\\"accessorsreport()\\\">\\n                <ion-img src=\\\"assets/accreport.png\\\"></ion-img>\\n                <ion-label class=\\\"inner\\\">Report</ion-label>\\n            </ion-segment-button>\\n        </ion-segment>\\n        <hr>\\n        <br>\\n        <p><b>Accessors Verification Summary</b></p>\\n        <ion-segment scrollable color=\\\"medium\\\">\\n            <ion-segment-button style=\\\"width: 30%;\\\">\\n                <div class=\\\"profileimage\\\" *ngIf=\\\"image === 'assets/icon-66.png'\\\">\\n                    <img src=\\\"assets/icon-66.png\\\" alt=\\\"\\\" (click)=\\\"cameraOption()\\\">\\n                </div>\\n                <div class=\\\"profileimage\\\" *ngIf=\\\"image != 'assets/icon-66.png'\\\">\\n                    <img src=\\\"{{image}}\\\" alt=\\\"\\\" (click)=\\\"cameraOption()\\\">\\n                </div>\\n                <!-- <img style=\\\"width: 80px;height: 80px;\\\" alt=\\\"Registration Image\\\" *ngIf=\\\"!fileUrl\\\" src=\\\"assets/icon-66.png\\\"/>\\n                <img style=\\\"width: 80px;height: 80px;\\\" alt=\\\"Registration Image\\\" *ngIf=\\\"fileUrl\\\" src=\\\"{{fileUrl}}\\\"/>\\n                <ion-button color=\\\"medium\\\" size=\\\"small\\\" (click)=\\\"selectImage()\\\">\\n                    <ion-icon slot=\\\"icon-only\\\" name=\\\"camera\\\"></ion-icon>\\n                </ion-button> -->\\n                <!-- <img src=\\\"{{mydetail.picpath}}\\\"  id='avatur' style=\\\"width: 80px;height: 80px;\\\" alt=\\\"Registration Image\\\" (click)=\\\"upImage()\\\"/>\\n                <ion-label class=\\\"inner\\\" style=\\\"font-size:9px\\\">{{mydetail.email}}</ion-label> -->\\n            </ion-segment-button>\\n            <ion-segment-button>\\n                <ion-label class=\\\"inner\\\">Busis</ion-label>\\n                <ion-label class=\\\"inner\\\">{{biz_num}}</ion-label>\\n            </ion-segment-button>\\n            <ion-segment-button>\\n                <ion-label class=\\\"inner\\\">Prof's</ion-label>\\n                <ion-label class=\\\"inner\\\">{{profess_num}}</ion-label>\\n            </ion-segment-button>\\n\\n        </ion-segment>\\n         <!-- <ion-segment scrollable color=\\\"medium\\\">\\n            <ion-segment-button (click)=\\\"profile()\\\">\\n                <ion-img src=\\\"assets/prof.png\\\"></ion-img>\\n                <ion-label class=\\\"inner\\\">My Profile</ion-label>\\n            </ion-segment-button>\\n            <ion-segment-button (click)=\\\"help()\\\">\\n                <ion-img src=\\\"assets/hlp.png\\\"></ion-img>\\n                <ion-label class=\\\"inner\\\">Help Line</ion-label>\\n            </ion-segment-button>\\n        </ion-segment> -->\\n    </ion-card>\\n</ion-content>\\n<!-- <ion-footer color=\\\"dark\\\" class=\\\"footer\\\">\\n    <ion-toolbar color=\\\"dark\\\">\\n        <ion-title class=\\\"footer\\\">Copyright SIVAGO </ion-title>\\n    </ion-toolbar>\\n</ion-footer> -->\"","module.exports = \".headerImage {\\n  height: 50%;\\n  width: 50%;\\n  margin: auto;\\n  margin-top: 4%;\\n  margin-bottom: 0%; }\\n\\n.footer {\\n  font-size: 11px;\\n  color: #a8a7a7; }\\n\\n.inner {\\n  font-size: 13px;\\n  color: #a8a7a7; }\\n\\na {\\n  color: #810909; }\\n\\nh2 {\\n  font-family: Verdana, Geneva, Tahoma, sans-serif;\\n  color: #a8a7a7;\\n  text-align: center; }\\n\\nh4 {\\n  font-family: Verdana, Geneva, Tahoma, sans-serif;\\n  color: #a8a7a7;\\n  text-align: center; }\\n\\nh5 {\\n  font-family: Verdana, Geneva, Tahoma, sans-serif;\\n  color: #a8a7a7;\\n  text-align: center; }\\n\\nlink {\\n  font-size: 13px;\\n  color: #a8a7a7;\\n  text-align: center; }\\n\\n.profile-pic {\\n  max-width: 200px;\\n  max-height: 200px;\\n  display: block; }\\n\\n.file-upload {\\n  display: none; }\\n\\n.circle {\\n  border-radius: 1000px !important;\\n  overflow: hidden;\\n  width: 128px;\\n  height: 128px;\\n  border: 8px solid rgba(255, 255, 255, 0.7);\\n  position: absolute;\\n  top: 72px; }\\n\\nimg {\\n  max-width: 100%;\\n  height: auto; }\\n\\n.p-image {\\n  position: absolute;\\n  top: 167px;\\n  right: 30px;\\n  color: #666666;\\n  transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275); }\\n\\n.p-image:hover {\\n  transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275); }\\n\\n.upload-button {\\n  font-size: 1.2em; }\\n\\n.upload-button:hover {\\n  transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);\\n  color: #999; }\\n\\n.profileimage {\\n  display: flex;\\n  flex-flow: row nowrap;\\n  justify-content: center;\\n  align-items: center;\\n  border-radius: 100%;\\n  margin-top: 10%; }\\n\\n.profileimage img {\\n    height: 150%;\\n    width: 150%;\\n    border-radius: 100%; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvaG9tZS9hY2Nlc3Nvci9HOlxcaW9uaWNcXGlvbmljX2FwcFxcdmVyaXByb2YtYXBwL3NyY1xcYXBwXFxob21lXFxhY2Nlc3NvclxcYWNjZXNzb3IucGFnZS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksV0FBVTtFQUNWLFVBQVM7RUFDVCxZQUFXO0VBQ1gsY0FBYztFQUNkLGlCQUFpQixFQUFBOztBQUdyQjtFQUNJLGVBQWU7RUFDZixjQUF5QixFQUFBOztBQUd6QjtFQUNJLGVBQWU7RUFDZixjQUF5QixFQUFBOztBQUd6QjtFQUNJLGNBQXFCLEVBQUE7O0FBR3pCO0VBQ0ksZ0RBQWdEO0VBQ2hELGNBQXlCO0VBQ3pCLGtCQUFrQixFQUFBOztBQUd0QjtFQUNJLGdEQUFnRDtFQUNoRCxjQUF5QjtFQUN6QixrQkFBa0IsRUFBQTs7QUFJdEI7RUFDSSxnREFBZ0Q7RUFDaEQsY0FBeUI7RUFDekIsa0JBQWtCLEVBQUE7O0FBSXRCO0VBQ0ksZUFBZTtFQUNmLGNBQXlCO0VBQ3pCLGtCQUFrQixFQUFBOztBQUk5QjtFQUNJLGdCQUFnQjtFQUNoQixpQkFBaUI7RUFDakIsY0FBYyxFQUFBOztBQUdsQjtFQUNJLGFBQWEsRUFBQTs7QUFFakI7RUFDSSxnQ0FBZ0M7RUFDaEMsZ0JBQWdCO0VBQ2hCLFlBQVk7RUFDWixhQUFhO0VBQ2IsMENBQTBDO0VBQzFDLGtCQUFrQjtFQUNsQixTQUFTLEVBQUE7O0FBRWI7RUFDSSxlQUFlO0VBQ2YsWUFBWSxFQUFBOztBQUVoQjtFQUNJLGtCQUFrQjtFQUNsQixVQUFVO0VBQ1YsV0FBVztFQUNYLGNBQWM7RUFDZCw0REFBd0QsRUFBQTs7QUFFNUQ7RUFDSSw0REFBd0QsRUFBQTs7QUFFNUQ7RUFDSSxnQkFBZ0IsRUFBQTs7QUFHcEI7RUFDSSw0REFBd0Q7RUFDeEQsV0FBVyxFQUFBOztBQUdmO0VBQ0ksYUFBYTtFQUNiLHFCQUFxQjtFQUNyQix1QkFBdUI7RUFDdkIsbUJBQW1CO0VBQ25CLG1CQUFtQjtFQU1uQixlQUFlLEVBQUE7O0FBWG5CO0lBT1EsWUFBWTtJQUNaLFdBQVc7SUFDWCxtQkFBbUIsRUFBQSIsImZpbGUiOiJzcmMvYXBwL2hvbWUvYWNjZXNzb3IvYWNjZXNzb3IucGFnZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmhlYWRlckltYWdle1xuICAgIGhlaWdodDo1MCU7XG4gICAgd2lkdGg6NTAlO1xuICAgIG1hcmdpbjphdXRvO1xuICAgIG1hcmdpbi10b3A6IDQlO1xuICAgIG1hcmdpbi1ib3R0b206IDAlO1xufVxuXG4uZm9vdGVyIHtcbiAgICBmb250LXNpemU6IDExcHg7XG4gICAgY29sb3I6IHJnYigxNjgsIDE2NywgMTY3KTtcbiAgICB9XG4gICAgXG4gICAgLmlubmVyIHtcbiAgICAgICAgZm9udC1zaXplOiAxM3B4O1xuICAgICAgICBjb2xvcjogcmdiKDE2OCwgMTY3LCAxNjcpO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIGEge1xuICAgICAgICAgICAgY29sb3I6IHJnYigxMjksIDksIDkpO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIGgyIHtcbiAgICAgICAgICAgIGZvbnQtZmFtaWx5OiBWZXJkYW5hLCBHZW5ldmEsIFRhaG9tYSwgc2Fucy1zZXJpZjtcbiAgICAgICAgICAgIGNvbG9yOiByZ2IoMTY4LCAxNjcsIDE2Nyk7XG4gICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgIH1cblxuICAgICAgICBoNCB7XG4gICAgICAgICAgICBmb250LWZhbWlseTogVmVyZGFuYSwgR2VuZXZhLCBUYWhvbWEsIHNhbnMtc2VyaWY7XG4gICAgICAgICAgICBjb2xvcjogcmdiKDE2OCwgMTY3LCAxNjcpO1xuICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICB9XG4gICAgXG5cbiAgICAgICAgaDUge1xuICAgICAgICAgICAgZm9udC1mYW1pbHk6IFZlcmRhbmEsIEdlbmV2YSwgVGFob21hLCBzYW5zLXNlcmlmO1xuICAgICAgICAgICAgY29sb3I6IHJnYigxNjgsIDE2NywgMTY3KTtcbiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgfVxuICAgIFxuXG4gICAgICAgIGxpbmsge1xuICAgICAgICAgICAgZm9udC1zaXplOiAxM3B4O1xuICAgICAgICAgICAgY29sb3I6IHJnYigxNjgsIDE2NywgMTY3KTtcbiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgfVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gYXZhdHVyIHBpY3R1cmUgLS0tLS0tLS0tLS0tLS1cbi5wcm9maWxlLXBpYyB7XG4gICAgbWF4LXdpZHRoOiAyMDBweDtcbiAgICBtYXgtaGVpZ2h0OiAyMDBweDtcbiAgICBkaXNwbGF5OiBibG9jaztcbn1cblxuLmZpbGUtdXBsb2FkIHtcbiAgICBkaXNwbGF5OiBub25lO1xufVxuLmNpcmNsZSB7XG4gICAgYm9yZGVyLXJhZGl1czogMTAwMHB4ICFpbXBvcnRhbnQ7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICB3aWR0aDogMTI4cHg7XG4gICAgaGVpZ2h0OiAxMjhweDtcbiAgICBib3JkZXI6IDhweCBzb2xpZCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNyk7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogNzJweDtcbn1cbmltZyB7XG4gICAgbWF4LXdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogYXV0bztcbn1cbi5wLWltYWdlIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiAxNjdweDtcbiAgICByaWdodDogMzBweDtcbiAgICBjb2xvcjogIzY2NjY2NjtcbiAgICB0cmFuc2l0aW9uOiBhbGwgLjNzIGN1YmljLWJlemllciguMTc1LCAuODg1LCAuMzIsIDEuMjc1KTtcbn1cbi5wLWltYWdlOmhvdmVyIHtcbiAgICB0cmFuc2l0aW9uOiBhbGwgLjNzIGN1YmljLWJlemllciguMTc1LCAuODg1LCAuMzIsIDEuMjc1KTtcbn1cbi51cGxvYWQtYnV0dG9uIHtcbiAgICBmb250LXNpemU6IDEuMmVtO1xufVxuXG4udXBsb2FkLWJ1dHRvbjpob3ZlciB7XG4gICAgdHJhbnNpdGlvbjogYWxsIC4zcyBjdWJpYy1iZXppZXIoLjE3NSwgLjg4NSwgLjMyLCAxLjI3NSk7XG4gICAgY29sb3I6ICM5OTk7XG59XG5cbi5wcm9maWxlaW1hZ2Uge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1mbG93OiByb3cgbm93cmFwO1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgYm9yZGVyLXJhZGl1czogMTAwJTtcbiAgICBpbWcge1xuICAgICAgICBoZWlnaHQ6IDE1MCU7XG4gICAgICAgIHdpZHRoOiAxNTAlO1xuICAgICAgICBib3JkZXItcmFkaXVzOiAxMDAlO1xuICAgIH1cbiAgICBtYXJnaW4tdG9wOiAxMCU7XG59Il19 */\"","import { Component, OnInit } from '@angular/core';\nimport { NavController } from '@ionic/angular';\nimport { Router } from '@angular/router';\nimport { RestApiService } from 'src/app/services/rest-api.service';\nimport { AuthenticateService } from '../../services/authentication.service';\nimport { ActionSheetController, ToastController, AlertController } from '@ionic/angular';\n\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { Camera, CameraOptions } from '@ionic-native/camera/ngx';\nimport { LoadingService } from 'src/app/services/loading.service';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Base64 } from '@ionic-native/base64/ngx';\n@Component({\n    selector: 'app-accessor',\n    templateUrl: './accessor.page.html',\n    styleUrls: ['./accessor.page.scss'],\n})\nexport class AccessorPage implements OnInit {\n    // avatur ----------------------------------\n\n    constructor(\n        public http: HttpClient,\n        private base64: Base64,\n        public toastController: ToastController,\n        private navCtrl: NavController,\n        private router: Router,\n        public restApi: RestApiService,\n        private authService: AuthenticateService,\n        private loading: LoadingService,\n        public formBuilder: FormBuilder,\n        public actionSheetController: ActionSheetController,\n        private camera: Camera,\n        private alertCtrl: AlertController,\n    ) {\n        this.name = this.formBuilder.group({\n            updateName: new FormControl('', Validators.compose([\n                Validators.minLength(3),\n                Validators.required,\n            ])),\n        });\n    }\n\n    commonUrl: string = 'http://back.veriprof.co.za';\n    image: string = 'assets/icon-66.png';\n    nikeName: any;\n    usernameUpdate: any;\n    name: FormGroup;\n\n    respData: any;\n    picture: File;\n    userEmail: string;\n    location: any;\n    biz_num: string;\n    profess_num: string;\n    croppedImagepath = \"\";\n    isLoading = false;\n\n    imagePickerOptions = {\n        maximumImagesCount: 1,\n        quality: 50\n    };\n\n    ngOnInit() {\n        if (this.authService.user.picpath != this.image) {\n            this.image = this.commonUrl + this.authService.user.picpath;\n        }\n        this.userEmail = this.authService.user.name;\n        this.getBiz();\n    }\n\n    unverifiedbiz() {\n        this.router.navigateByUrl('home/accessor/unverifiedbiz');\n    }\n\n    unverifiedpers() {\n        this.router.navigateByUrl('home/accessor/unverifiedpers');\n    }\n\n    schedules() {\n        this.router.navigateByUrl('home/accessor/schedules');\n    }\n\n    accessorsreport() {\n        this.router.navigateByUrl('home/accessor/accessorsreport');\n    }\n\n    logout() {\n        this.authService.logoutUser();\n        this.navCtrl.navigateBack('');\n    }\n\n    getBiz() {\n        this.restApi.post('accessor/get-verified', { verified_by: this.authService.user.userId, status: 'Verified' }).subscribe((res: any) => {\n            if (res && res.status) {\n                if (res.status == 'success') {\n                    this.biz_num = res.data[0].toString();\n                    this.profess_num = res.data[1].toString();\n                } else {\n                    this.toastController.create({\n                        message: res.message,\n                        duration: 2000\n                    }).then(toast => toast.present());\n                }\n            }\n        }, error => {\n            console.log(error);\n            this.toastController.create({\n                message: 'Something went wrong.',\n                duration: 2000\n            }).then(toast => toast.present());\n        });\n    }\n\n    async cameraOption() {\n        const alert = await this.alertCtrl.create({\n            header: 'Select Profile Picture',\n            buttons: [\n                {\n                    text: 'Camera',\n                    role: 'camera',\n                    handler: () => {\n                        this.profilePictureCamera()\n                    }\n                },\n                {\n                    text: 'Gallery',\n                    cssClass: 'secondary',\n                    role: 'gallery',\n                    handler: () => {\n                        this.profilePictureGallery()\n                    }\n                }\n            ]\n        })\n        await alert.present();\n    }\n\n    //for update the profile picture \n    async profilePictureCamera() {\n        const option: CameraOptions = {\n            quality: 100,\n            targetHeight: 530,\n            targetWidth: 530,\n            sourceType: this.camera.PictureSourceType.CAMERA,\n            destinationType: this.camera.DestinationType.DATA_URL,\n            encodingType: this.camera.EncodingType.JPEG,\n            mediaType: this.camera.MediaType.PICTURE,\n            correctOrientation: true,\n            allowEdit: true\n        }\n        this.updateImage(option);\n    }\n\n    async profilePictureGallery() {\n        const option: CameraOptions = {\n            quality: 100,\n            targetHeight: 530,\n            targetWidth: 530,\n            sourceType: this.camera.PictureSourceType.PHOTOLIBRARY,\n            destinationType: this.camera.DestinationType.DATA_URL,\n            encodingType: this.camera.EncodingType.JPEG,\n            mediaType: this.camera.MediaType.PICTURE,\n            correctOrientation: true,\n            allowEdit: true\n        }\n        this.updateImage(option);\n    }\n\n    updateImage(option) {\n        try {\n            // this handle the upload to the firebase \n            // it handle the selection from the image after will be upload to firebase storage \n            this.camera.getPicture(option).then((imageData) => {\n                this.loading.showPro()\n                let url = \"data:image/jpeg;base64,\" + imageData;\n                // let imgBlob = this.imgURItoBlob(imageData);\n                // let metadata = { 'contentType': imgBlob.type };\n                this.restApi.post('accessor/up-user', { user_id: this.authService.user.userId, data: url, type: \"image/jpeg\" }).subscribe((res: any) => {\n                    if (res && res.status) {\n                        if (res.data != this.image) {\n                            this.authService.user.picpath = res.data;\n                            this.image = this.commonUrl + res.data;\n                            this.loading.hide();\n                        }\n                    }\n                }, error => {\n                    console.log(error);\n                    this.toastController.create({\n                        message: 'Something went wrong.',\n                        duration: 2000\n                    }).then(toast => toast.present());\n                });\n            })\n        } catch (error) {\n            console.log(error, option.sourceType);\n        }\n    }\n\n    imgURItoBlob(dataURI) {\n        var binary = atob(dataURI.split(',')[1]);\n        var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\n        var array = [];\n        for (var i = 0; i < binary.length; i++) {\n            array.push(binary.charCodeAt(i));\n        }\n        return new Blob([new Uint8Array(array)], {\n            type: mimeString\n        });\n    }\n\n    updated() {\n        this.loading.show();\n        // firebase.database().ref(\"accounts/\" + firebase.auth().currentUser.uid).once(\"value\").then((profile) => {\n        //   if (profile.val()) {\n        //     this.angularDb.object(\"accounts/\" + firebase.auth().currentUser.uid).update({\n        //       nikeName: this.nikeName\n        //     }).then(() => {\n        //       this.loading.hide()\n        //       this.router.navigateByUrl(\"/home\")\n        //     })\n        //   }\n        // })\n    }\n\n    //   this.camera.getPicture(this.options)\n    //   .then((imageData) => {\n    //     this.base64Image = 'data:image/png;base64,'+imageData;\n    //     this.mydetail.picpath = this.base64Image;\n    // this.restApi.post('accessor/up-user', {user_id:this.authService.user.userId,  data:{picpath:this.base64Image}}).subscribe((res: any) => {\n    //   if (res && res.status) {\n    //     console.log(res.data);\n    //     this.mydetail = res.data;\n    //   }\n    // }, error => {\n    //   console.log(error);\n    //   this.toastController.create({\n    //     message: 'Something went wrong.',\n    //     duration: 2000\n    //   }).then(toast => toast.present());\n    // });\n    //   }, (err) => {\n    //      console.log(err);\n    //   });\n\n    presentToast(msg) {\n        this.toastController.create({ message: msg, duration: 2000 }).then(toast => toast.present());\n    }\n}\n\n"],"sourceRoot":""}